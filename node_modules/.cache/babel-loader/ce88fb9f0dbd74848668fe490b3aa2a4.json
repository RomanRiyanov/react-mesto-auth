{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co'; // const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      \"password\": password,\n      \"email\": email\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - некорректно заполнено одно из полей');\n    } else return res.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": `${password}`,\n      \"email\": `${email}`\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - не передано одно из полей');\n    } else if (res.status === 401) {\n      alert('Код ошибки 400 - пользователь с email не найден');\n    } else return res.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};\nexport const getContent = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - Токен не передан или передан не в том формате');\n    } else if (res.status === 401) {\n      alert('Код ошибки 400 - Переданный токен некорректен');\n    } else return res.json();\n  });\n};","map":{"version":3,"names":["BASE_URL","register","password","email","fetch","method","headers","body","then","res","status","alert","json","catch","err","console","log","authorize","JSON","stringify","getContent","jwt"],"sources":["/Users/romansexmachine/Desktop/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\n\n// const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: {\n            \"password\": password,\n            \"email\": email\n        }\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - некорректно заполнено одно из полей');\n        } else return res.json();\n    })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}\n\nexport const authorize = (password, email) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"password\": `${password}`,\n            \"email\": `${email}`\n        })\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - не передано одно из полей');\n        } else if (res.status === 401) {\n            alert('Код ошибки 400 - пользователь с email не найден');\n        } \n        else return res.json();\n    })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}\n\nexport const getContent = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\" : `Bearer ${jwt}`\n        }\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - Токен не передан или передан не в том формате');\n        } else if (res.status === 401) {\n            alert('Код ошибки 400 - Переданный токен некорректен');\n        } \n        else return res.json();\n    })\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EACzC,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAE;MACF,YAAYL,QADV;MAEF,SAASC;IAFP;EALyB,CAAvB,CAAL,CAUNK,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,sDAAD,CAAL;IACH,CAFD,MAEO,OAAOF,GAAG,CAACG,IAAJ,EAAP;EACV,CAdM,EAeNJ,IAfM,CAeAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CAjBI,EAkBNI,KAlBM,CAkBCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAa,WAAUF,GAAI,EAA3B,CAlBT,CAAP;AAmBH,CApBM;AAsBP,OAAO,MAAMG,SAAS,GAAG,CAACf,QAAD,EAAWC,KAAX,KAAqB;EAC1C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAEW,IAAI,CAACC,SAAL,CAAe;MACjB,YAAa,GAAEjB,QAAS,EADP;MAEjB,SAAU,GAAEC,KAAM;IAFD,CAAf;EALyB,CAAvB,CAAL,CAUNK,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,4CAAD,CAAL;IACH,CAFD,MAEO,IAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MAC3BC,KAAK,CAAC,iDAAD,CAAL;IACH,CAFM,MAGF,OAAOF,GAAG,CAACG,IAAJ,EAAP;EACR,CAjBM,EAkBNJ,IAlBM,CAkBAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CApBI,EAqBNI,KArBM,CAqBCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAa,WAAUF,GAAI,EAA3B,CArBT,CAAP;AAsBH,CAvBM;AAyBP,OAAO,MAAMM,UAAU,GAAIC,GAAD,IAAS;EAC/B,OAAOjB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;IACjCK,MAAM,EAAE,KADyB;IAEjCC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,iBAAmB,UAASe,GAAI;IAF3B;EAFwB,CAAzB,CAAL,CAONb,IAPM,CAOAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,gEAAD,CAAL;IACH,CAFD,MAEO,IAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MAC3BC,KAAK,CAAC,+CAAD,CAAL;IACH,CAFM,MAGF,OAAOF,GAAG,CAACG,IAAJ,EAAP;EACR,CAdM,CAAP;AAeH,CAhBM"},"metadata":{},"sourceType":"module"}