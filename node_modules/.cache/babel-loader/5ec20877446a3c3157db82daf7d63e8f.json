{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co'; // const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      \"password\": password,\n      \"email\": email\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400');\n    } else return res.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};\nexport const login = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: {\n      \"password\": password,\n      \"email\": email\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - некорректно заполнено одно из полей ');\n    } else return res.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};","map":{"version":3,"names":["BASE_URL","register","password","email","fetch","method","headers","body","then","res","status","alert","json","catch","err","console","log","login"],"sources":["/Users/romansexmachine/Desktop/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\n\n// const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: {\n            \"password\": password,\n            \"email\": email\n        }\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400');\n        } else return res.json();\n    })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}\n\nexport const login = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: {\n            \"password\": password,\n            \"email\": email\n        }\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - некорректно заполнено одно из полей ');\n        } else return res.json();\n    })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EACzC,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAE;MACF,YAAYL,QADV;MAEF,SAASC;IAFP;EALyB,CAAvB,CAAL,CAUNK,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,gBAAD,CAAL;IACH,CAFD,MAEO,OAAOF,GAAG,CAACG,IAAJ,EAAP;EACV,CAdM,EAeNJ,IAfM,CAeAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CAjBI,EAkBNI,KAlBM,CAkBCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAa,WAAUF,GAAI,EAA3B,CAlBT,CAAP;AAmBH,CApBM;AAsBP,OAAO,MAAMG,KAAK,GAAG,CAACf,QAAD,EAAWC,KAAX,KAAqB;EACtC,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAE;MACF,YAAYL,QADV;MAEF,SAASC;IAFP;EALyB,CAAvB,CAAL,CAUNK,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,uDAAD,CAAL;IACH,CAFD,MAEO,OAAOF,GAAG,CAACG,IAAJ,EAAP;EACV,CAdM,EAeNJ,IAfM,CAeAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CAjBI,EAkBNI,KAlBM,CAkBCC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAa,WAAUF,GAAI,EAA3B,CAlBT,CAAP;AAmBH,CApBM"},"metadata":{},"sourceType":"module"}