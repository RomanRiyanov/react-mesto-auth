{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co'; // const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(`${password}, ${email}`)\n  }).then(res => {\n    try {\n      if (res.status === 200) {\n        return res.json();\n      }\n    } catch (error) {\n      return error;\n    }\n  }).then(res => {\n    return res;\n  }).catch(error => console.log(error));\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(`${password}, ${email}`)\n  }).then(res => {\n    try {\n      if (res.status === 200) {\n        return res.json();\n      }\n    } catch (error) {\n      return error;\n    }\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};\nexport const getContent = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    }\n  }).then(res => {\n    try {\n      if (res.status === 200) {\n        return res.json();\n      }\n    } catch (error) {\n      return error;\n    }\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};","map":{"version":3,"names":["BASE_URL","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","status","json","error","catch","console","log","authorize","err","getContent","jwt"],"sources":["/Users/romansexmachine/Desktop/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\n\n// const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(`${password}, ${email}`)\n    })\n    .then((res) => {\n        try {\n          if (res.status === 200){\n            return res.json();\n          } \n        } catch(error){\n          return (error)\n        }\n      })\n      .then((res) => {\n        return res;\n      })\n      .catch((error) => console.log(error));\n}; \n\nexport const authorize = (password, email) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(`${password}, ${email}`)\n    })\n    .then((res) => {\n        try {\n          if (res.status === 200){\n            return res.json();\n          } \n        } catch(error){\n          return (error)\n        }\n      })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}\n\nexport const getContent = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\" : `Bearer ${jwt}`\n        }\n    })\n    .then((res) => {\n        try {\n          if (res.status === 200){\n            return res.json();\n          } \n        } catch(error){\n          return (error)\n        }\n      })\n      .catch((err) => console.log(`Ошибка: ${err}`))\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EACzC,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgB,GAAEP,QAAS,KAAIC,KAAM,EAArC;EALyB,CAAvB,CAAL,CAONO,IAPM,CAOAC,GAAD,IAAS;IACX,IAAI;MACF,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAuB;QACrB,OAAOD,GAAG,CAACE,IAAJ,EAAP;MACD;IACF,CAJD,CAIE,OAAMC,KAAN,EAAY;MACZ,OAAQA,KAAR;IACD;EACF,CAfI,EAgBJJ,IAhBI,CAgBEC,GAAD,IAAS;IACb,OAAOA,GAAP;EACD,CAlBI,EAmBJI,KAnBI,CAmBGD,KAAD,IAAWE,OAAO,CAACC,GAAR,CAAYH,KAAZ,CAnBb,CAAP;AAoBH,CArBM;AAuBP,OAAO,MAAMI,SAAS,GAAG,CAAChB,QAAD,EAAWC,KAAX,KAAqB;EAC1C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAgB,GAAEP,QAAS,KAAIC,KAAM,EAArC;EALyB,CAAvB,CAAL,CAONO,IAPM,CAOAC,GAAD,IAAS;IACX,IAAI;MACF,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAuB;QACrB,OAAOD,GAAG,CAACE,IAAJ,EAAP;MACD;IACF,CAJD,CAIE,OAAMC,KAAN,EAAY;MACZ,OAAQA,KAAR;IACD;EACF,CAfI,EAgBNJ,IAhBM,CAgBAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CAlBI,EAmBNI,KAnBM,CAmBCI,GAAD,IAASH,OAAO,CAACC,GAAR,CAAa,WAAUE,GAAI,EAA3B,CAnBT,CAAP;AAoBH,CArBM;AAuBP,OAAO,MAAMC,UAAU,GAAIC,GAAD,IAAS;EAC/B,OAAOjB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;IACjCK,MAAM,EAAE,KADyB;IAEjCC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,iBAAmB,UAASe,GAAI;IAF3B;EAFwB,CAAzB,CAAL,CAONX,IAPM,CAOAC,GAAD,IAAS;IACX,IAAI;MACF,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAuB;QACrB,OAAOD,GAAG,CAACE,IAAJ,EAAP;MACD;IACF,CAJD,CAIE,OAAMC,KAAN,EAAY;MACZ,OAAQA,KAAR;IACD;EACF,CAfI,EAgBJC,KAhBI,CAgBGI,GAAD,IAASH,OAAO,CAACC,GAAR,CAAa,WAAUE,GAAI,EAA3B,CAhBX,CAAP;AAiBH,CAlBM"},"metadata":{},"sourceType":"module"}