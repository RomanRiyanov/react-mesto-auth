{"ast":null,"code":"const BASE_URL = 'https://auth.nomoreparties.co'; // const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n  return fetch(`${BASE_URL}/signup`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - некорректно заполнено одно из полей');\n    } else {\n      console.log('отработало в auth');\n      return res.json();\n    }\n\n    ;\n  }).then(res => {\n    console.log('отработало в auth папожи');\n    return res;\n  }).catch(err => {\n    console.log('отработало в auth err');\n    console.log(`Ошибка: ${err}`);\n  });\n};\nexport const authorize = (password, email) => {\n  return fetch(`${BASE_URL}/signin`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      \"password\": password,\n      \"email\": email\n    })\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - не передано одно из полей');\n    } else if (res.status === 401) {\n      alert('Код ошибки 401 - пользователь с email не найден');\n    } else return res.json();\n  }).then(res => {\n    return res;\n  }).catch(err => console.log(`Ошибка: ${err}`));\n};\nexport const getContent = jwt => {\n  return fetch(`${BASE_URL}/users/me`, {\n    method: 'GET',\n    headers: {\n      \"Content-Type\": \"application/json\",\n      \"Authorization\": `Bearer ${jwt}`\n    }\n  }).then(res => {\n    if (res.status === 400) {\n      alert('Код ошибки 400 - Токен не передан или передан не в том формате');\n    } else if (res.status === 401) {\n      alert('Код ошибки 401 - Переданный токен некорректен');\n    } else return res.json();\n  });\n};","map":{"version":3,"names":["BASE_URL","register","password","email","fetch","method","headers","body","JSON","stringify","then","res","status","alert","console","log","json","catch","err","authorize","getContent","jwt"],"sources":["/Users/romansexmachine/Desktop/dev/react-mesto-auth/src/components/Auth.js"],"sourcesContent":["const BASE_URL = 'https://auth.nomoreparties.co';\n\n// const checkResponse = (res) => {\n//     if (res.ok) {\n//         return res.json()\n//     } else return Promise.reject(`Ошибка: ${res.status}`)\n// }\n\nexport const register = (password, email) => {\n    return fetch(`${BASE_URL}/signup`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"password\": password,\n            \"email\": email\n        })\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - некорректно заполнено одно из полей');\n        } else {\n            console.log('отработало в auth');\n            return res.json();\n        };\n    })\n    .then((res) => {\n        console.log('отработало в auth папожи');\n\n        return res;\n      })\n    .catch((err) => {\n        console.log('отработало в auth err');\n\n        console.log(`Ошибка: ${err}`);\n    })\n}\n\nexport const authorize = (password, email) => {\n    return fetch(`${BASE_URL}/signin`, {\n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n            \"password\": password,\n            \"email\": email\n        })\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - не передано одно из полей');\n        } else if (res.status === 401) {\n            alert('Код ошибки 401 - пользователь с email не найден');\n        } \n        else return res.json();\n    })\n    .then((res) => {\n        return res;\n      })\n    .catch((err) => console.log(`Ошибка: ${err}`))\n}\n\nexport const getContent = (jwt) => {\n    return fetch(`${BASE_URL}/users/me`, {\n        method: 'GET',\n        headers: {\n            \"Content-Type\": \"application/json\",\n            \"Authorization\" : `Bearer ${jwt}`\n        }\n    })\n    .then((res) => {\n        if (res.status === 400) {\n            alert('Код ошибки 400 - Токен не передан или передан не в том формате');\n        } else if (res.status === 401) {\n            alert('Код ошибки 401 - Переданный токен некорректен');\n        } \n        else return res.json();\n    })\n}"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,+BAAjB,C,CAEA;AACA;AACA;AACA;AACA;;AAEA,OAAO,MAAMC,QAAQ,GAAG,CAACC,QAAD,EAAWC,KAAX,KAAqB;EACzC,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACjB,YAAYP,QADK;MAEjB,SAASC;IAFQ,CAAf;EALyB,CAAvB,CAAL,CAUNO,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,sDAAD,CAAL;IACH,CAFD,MAEO;MACHC,OAAO,CAACC,GAAR,CAAY,mBAAZ;MACA,OAAOJ,GAAG,CAACK,IAAJ,EAAP;IACH;;IAAA;EACJ,CAjBM,EAkBNN,IAlBM,CAkBAC,GAAD,IAAS;IACXG,OAAO,CAACC,GAAR,CAAY,0BAAZ;IAEA,OAAOJ,GAAP;EACD,CAtBI,EAuBNM,KAvBM,CAuBCC,GAAD,IAAS;IACZJ,OAAO,CAACC,GAAR,CAAY,uBAAZ;IAEAD,OAAO,CAACC,GAAR,CAAa,WAAUG,GAAI,EAA3B;EACH,CA3BM,CAAP;AA4BH,CA7BM;AA+BP,OAAO,MAAMC,SAAS,GAAG,CAACjB,QAAD,EAAWC,KAAX,KAAqB;EAC1C,OAAOC,KAAK,CAAE,GAAEJ,QAAS,SAAb,EAAuB;IAC/BK,MAAM,EAAE,MADuB;IAE/BC,OAAO,EAAE;MACL,gBAAgB;IADX,CAFsB;IAK/BC,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;MACjB,YAAYP,QADK;MAEjB,SAASC;IAFQ,CAAf;EALyB,CAAvB,CAAL,CAUNO,IAVM,CAUAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,4CAAD,CAAL;IACH,CAFD,MAEO,IAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MAC3BC,KAAK,CAAC,iDAAD,CAAL;IACH,CAFM,MAGF,OAAOF,GAAG,CAACK,IAAJ,EAAP;EACR,CAjBM,EAkBNN,IAlBM,CAkBAC,GAAD,IAAS;IACX,OAAOA,GAAP;EACD,CApBI,EAqBNM,KArBM,CAqBCC,GAAD,IAASJ,OAAO,CAACC,GAAR,CAAa,WAAUG,GAAI,EAA3B,CArBT,CAAP;AAsBH,CAvBM;AAyBP,OAAO,MAAME,UAAU,GAAIC,GAAD,IAAS;EAC/B,OAAOjB,KAAK,CAAE,GAAEJ,QAAS,WAAb,EAAyB;IACjCK,MAAM,EAAE,KADyB;IAEjCC,OAAO,EAAE;MACL,gBAAgB,kBADX;MAEL,iBAAmB,UAASe,GAAI;IAF3B;EAFwB,CAAzB,CAAL,CAONX,IAPM,CAOAC,GAAD,IAAS;IACX,IAAIA,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MACpBC,KAAK,CAAC,gEAAD,CAAL;IACH,CAFD,MAEO,IAAIF,GAAG,CAACC,MAAJ,KAAe,GAAnB,EAAwB;MAC3BC,KAAK,CAAC,+CAAD,CAAL;IACH,CAFM,MAGF,OAAOF,GAAG,CAACK,IAAJ,EAAP;EACR,CAdM,CAAP;AAeH,CAhBM"},"metadata":{},"sourceType":"module"}